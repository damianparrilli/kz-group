---
const { t } = Astro.props;
---

<section class="py-20">
  <div class="contenedor flex flex-col items-center">
    <h2 class="text-oscuro text-3xl font-bold w-full text-center">{t.title}</h2>
    <form
      id="workwith-form"
      action="https://api.web3forms.com/submit"
      method="POST"
      enctype="multipart/form-data"
      class="flex flex-col gap-4 w-full md:h-[500px] max-w-4xl py-12"
    >
      <input
        type="hidden"
        name="access_key"
        value="0c2ab805-1c47-47fc-bab5-5d000c250703"
      />
      <input
        type="hidden"
        name="subject"
        value="Mensaje de Formulario de Trabajo - KZ Group"
      />
      <input type="hidden" name="from_name" value="KZ Group" />
      <input
        type="checkbox"
        name="botcheck"
        class="hidden"
        style="display: none;"
      />

      <div class="flex flex-col">
        <label for="work-nombre" class="sr-only">{t.formName}</label>
        <input
          type="text"
          name="nombre"
          id="work-nombre"
          placeholder={t.formName}
          class="w-full rounded-lg px-4 py-2 border-[0.5px] text-oscuro focus:outline-none flex flex-col gap-2 justify-center items-center border-[#5f5f5f]"
        />
        <p class="text-red-600 text-sm hidden" id="error-nombre"></p>
      </div>

      <div class="flex flex-col">
        <label for="work-email" class="sr-only">E-mail</label>
        <input
          type="email"
          name="email"
          id="work-email"
          placeholder="E-mail"
          class="w-full rounded-lg px-4 py-2 border-[0.5px] text-oscuro focus:outline-none flex flex-col gap-2 justify-center items-center border-[#5f5f5f]"
        />
        <p class="text-red-600 text-sm hidden" id="error-email"></p>
      </div>

      <div class="flex flex-col">
        <label for="work-asunto" class="sr-only">{t.formSubject}</label>
        <input
          type="text"
          name="asunto"
          id="work-asunto"
          placeholder={t.formSubject}
          class="w-full rounded-lg px-4 py-2 border-[0.5px] text-oscuro focus:outline-none flex flex-col gap-2 justify-center items-center border-[#5f5f5f]"
        />
        <p class="text-red-600 text-sm mt-1 hidden" id="error-asunto"></p>
      </div>

      <div class="flex flex-col">
        <label for="work-mensaje" class="sr-only">{t.formMessage}</label>
        <textarea
          name="mensaje"
          id="work-mensaje"
          placeholder={t.formMessage}
          class="w-full rounded-lg px-4 py-2 border-[0.5px] text-oscuro focus:outline-none border-[#5f5f5f] min-h-32 md:h-full"
        ></textarea>
        <p class="text-red-600 text-sm mt-1 hidden" id="error-mensaje"></p>
      </div>
      <button
        type="submit"
        class="w-full text-center font-medium rounded-md bg-acento text-oscuro px-7 py-3 text-lg cursor-pointer hover:bg-[#f7b046] transition-all duration-300 ease-in-out"
      >
        {t.button}
      </button>

      <p id="form-status" class="text-sm"></p>
      <div class="flex justify-center gap-1 text-oscuro">
        <p>{t.mailTitle}</p><a
          href="mailto:info@kzgroup.com"
          class="hover:text-acento transition-all ease-in-out duration-300"
          >info@kzgroup.com.ar</a
        >
      </div>
    </form>
  </div>
</section>

<script type="module">
  const form = document.querySelector("#workwith-form");
  const statusEl = document.getElementById("form-status");

  const nombre = document.getElementById("work-nombre");
  const email = document.getElementById("work-email");
  const asunto = document.getElementById("work-asunto");
  const mensaje = document.getElementById("work-mensaje");

  const errorNombre = document.getElementById("error-nombre");
  const errorEmail = document.getElementById("error-email");
  const errorAsunto = document.getElementById("error-asunto");
  const errorMensaje = document.getElementById("error-mensaje");

  const lang = document.documentElement.lang || "es";

  const translations = {
    es: {
      errors: {
        nombre: "Ingresa tu nombre.",
        email: "Ingresa tu correo.",
        emailInvalid: "Ingresa un correo válido.",
        asunto: "Ingresa el asunto.",
        mensaje: "Escribe un mensaje.",
      },
      status: {
        sending: "Enviando...",
        success: "Mensaje enviado correctamente.",
        error: "Error: ",
        connection: "Error de conexión. Intenta nuevamente.",
      },
    },
    en: {
      errors: {
        nombre: "Enter your name.",
        email: "Enter your email.",
        emailInvalid: "Enter a valid email.",
        asunto: "Enter the subject.",
        mensaje: "Write a message.",
      },
      status: {
        sending: "Sending...",
        success: "Message sent successfully.",
        error: "Error: ",
        connection: "Connection error. Please try again.",
      },
    },
  };

  form.addEventListener("submit", async (e) => {
    e.preventDefault();

    let valid = true;

    [errorNombre, errorEmail, errorAsunto, errorMensaje].forEach((el) => {
      el.textContent = "";
      el.classList.add("hidden");
    });

    if (!nombre.value.trim()) {
      errorNombre.textContent = translations[lang].errors.nombre;
      errorNombre.classList.remove("hidden");
      valid = false;
    }
    if (!email.value.trim()) {
      errorEmail.textContent = translations[lang].errors.email;
      errorEmail.classList.remove("hidden");
      valid = false;
    } else if (!/^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(email.value)) {
      errorEmail.textContent = translations[lang].errors.emailInvalid;
      errorEmail.classList.remove("hidden");
      valid = false;
    }
    if (!asunto.value.trim()) {
      errorAsunto.textContent = translations[lang].errors.asunto;
      errorAsunto.classList.remove("hidden");
      valid = false;
    }
    if (!mensaje.value.trim()) {
      errorMensaje.textContent = translations[lang].errors.mensaje;
      errorMensaje.classList.remove("hidden");
      valid = false;
    }

    if (!valid) return;

    statusEl.textContent = translations[lang].status.sending;
    statusEl.className = "text-blue-600 text-sm";

    const formData = new FormData(form);

    try {
      const res = await fetch(form.action, { method: "POST", body: formData });
      const data = await res.json();

      if (res.ok && data.success) {
        statusEl.textContent = translations[lang].status.success;
        statusEl.className = "text-green-600 text-sm";
        form.reset();
      } else {
        statusEl.textContent =
          translations[lang].status.error +
          (data.message ||
            (lang === "es" ? "No se pudo enviar." : "Could not send."));
        statusEl.className = "text-red-600 text-sm";
      }
    } catch {
      statusEl.textContent = translations[lang].status.connection;
      statusEl.className = "text-red-600 text-sm";
    }
  });
</script>
<!-- 
<script>
  const fileInput = document.getElementById("file") as HTMLInputElement;
  const fileName = document.getElementById("file-name") as HTMLInputElement;
  const lang = document.documentElement.lang || "es"; // Tomamos el idioma actual

  const translations = {
    es: {
      noFile: "Ningún archivo seleccionado",
    },
    en: {
      noFile: "No file selected",
    },
  };

  fileInput.addEventListener("change", function () {
    if (fileInput.files.length > 0) {
      fileName.textContent = fileInput.files[0].name;
    } else {
      fileName.textContent = translations[lang]?.noFile || "No file selected";
    }
  });
</script> -->
